//
//  MoviesWorker.swift
//  CleanMovieDB
//
//  Created by Francis Breidenbach on 10/31/17.
//  Copyright (c) 2017 Francis Breidenbach. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import Alamofire
import ObjectMapper

protocol MoviesAPIProtocol {
  func fetchMovies(forPage page: Int, completionHandler: @escaping (Result<[Movie]>) -> Void)
  
  func parseMovies(fromResponse response: DataResponse<Any>) -> Result<[Movie]>
}


class MoviesWorker: MoviesAPIProtocol {
  
  func fetchMovies(forPage page: Int, completionHandler: @escaping (Result<[Movie]>) -> Void) {
    Alamofire.request(MoviesRouter.getMovies(page: page))
      .responseJSON { response in
        
        let movieArray = self.parseMovies(fromResponse: response)
        
        completionHandler(movieArray)
    }
  }
  
  func parseMovies(fromResponse response: DataResponse<Any>) -> Result<[Movie]> {
    guard response.result.error == nil else {
      return .failure(MoviesAPIError.network(error: response.result.error!))
    }
    
    guard let json = response.result.value as? [String: Any] else {
      return .failure(MoviesAPIError.serializationError(reason: "Could not convert response to dictionary"))
    }
    
    guard let resultJSON = json["results"] as? [[String: Any]] else {
      return .failure(MoviesAPIError.serializationError(reason: "Could not get results from response dictionary"))
    }
    
    var movies = [Movie]()
    
    for result in resultJSON {
      if let movie = Mapper<Movie>().map(JSON: result) {
        movies.append(movie)
      }
    }
    
    
    return .success(movies)
    
  }
}
