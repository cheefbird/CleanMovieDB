//
//  SearchAllViewController.swift
//  CleanMovieDB
//
//  Created by Francis Breidenbach on 1/8/18.
//  Copyright (c) 2018 Francis Breidenbach. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchAllDisplayLogic: class {
  func displayResults(viewModel: SearchAll.Search.ViewModel)
}

class SearchAllViewController: UIViewController, SearchAllDisplayLogic {
  
  // MARK: - Dependencies
  
  var interactor: SearchAllBusinessLogic?
  var router: (NSObjectProtocol & SearchAllRoutingLogic & SearchAllDataPassing)?
  
  // MARK: - Outlets
  
  @IBOutlet var instructionLabel: UILabel!
  @IBOutlet var searchBar: UISearchBar!
  @IBOutlet var searchButton: UIButton!
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = SearchAllInteractor()
    let presenter = SearchAllPresenter()
    let router = SearchAllRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    searchBar.becomeFirstResponder()
  }
  
  override func viewDidDisappear(_ animated: Bool) {
    searchBar.resignFirstResponder()
    
    super.viewDidDisappear(animated)
  }
  
  // MARK: Search Action
  
  @IBAction func performSearch() {
    guard let query = searchBar.text,
      query.count > 0 else {
        instructionLabel.text = "Try searching again - search field was empty!"
        return
    }
    startSearching(for: query)
  }
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func startSearching(for query: String) {
    let request = SearchAll.Search.Request(query: query)
    interactor?.search(for: request)
  }
  
  func displayResults(viewModel: SearchAll.Search.ViewModel) {
    guard viewModel.movies.count > 0 else {
      instructionLabel.text = "No results. Try again ..."
      return
    }
    
    instructionLabel.text = "\(viewModel.movies.count) movies found."
    for movie in viewModel.movies {
      instructionLabel.text?.append("\n\(movie.title)")
    }
  }
}
