//
//  ListMoviesViewController.swift
//  CleanMovieDB
//
//  Created by Francis Breidenbach on 10/30/17.
//  Copyright (c) 2017 Francis Breidenbach. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListMoviesDisplayLogic: class {
  func displayMovies(viewModel: ListMovies.FetchMovies.ViewModel)
}

class ListMoviesViewController: UIViewController, ListMoviesDisplayLogic {
  
  // MARK: Critical Properties
  
  var interactor: ListMoviesBusinessLogic?
  var router: (NSObjectProtocol & ListMoviesRoutingLogic & ListMoviesDataPassing)?
  
  // MARK: - Properties
  
  var movies = [ListMovies.FetchMovies.ViewModel.DisplayedMovie]()
  
  var pagesLoaded = 0
  var isFetching = false
  
  // MARK: Outlets
  
  @IBOutlet var tableView: UITableView!
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = ListMoviesInteractor()
    let presenter = ListMoviesPresenter()
    let router = ListMoviesRouter()
    let worker = MoviesWorker()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    interactor.worker = worker
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    pagesLoaded = 1
    fetchMovies(forPage: 1)
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    fetchMovies(forPage: 1)
  }
  
  // MARK: Fetch Movies
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func fetchMovies(forPage page: Int) {
    let request = ListMovies.FetchMovies.Request(page: page)
    isFetching = true
    interactor?.fetchMovies(request: request)
  }
  
  func displayMovies(viewModel: ListMovies.FetchMovies.ViewModel) {
    isFetching = false
    pagesLoaded += 1
    
    movies.append(contentsOf: viewModel.displayedMovies)
    tableView.reloadData()
  }
}

// MARK: - TableView Delegate

extension ListMoviesViewController: UITableViewDelegate {
  
}

// MARK: - TableView DataSource

extension ListMoviesViewController: UITableViewDataSource {
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return movies.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    
    let movie = movies[indexPath.row]
    
    var cell = tableView.dequeueReusableCell(withIdentifier: "MovieCell") ?? UITableViewCell(style: .value1, reuseIdentifier: "MovieCell")
    
    if (movies.count - indexPath.row < 5) && !isFetching {
      fetchMovies(forPage: pagesLoaded)
    }
    
    cell.textLabel?.text = movie.title
    cell.detailTextLabel?.text = String(describing: movie.score)
    
    return cell
  }
  
}










