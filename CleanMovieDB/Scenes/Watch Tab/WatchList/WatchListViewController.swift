//
//  WatchListViewController.swift
//  CleanMovieDB
//
//  Created by Francis Breidenbach on 11/27/17.
//  Copyright (c) 2017 Francis Breidenbach. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WatchListDisplayLogic: class {
  func displaySomething(viewModel: WatchList.Something.ViewModel)
}

class WatchListViewController: UIViewController, WatchListDisplayLogic {
  
  // MARK: - Dependencies
  
  var interactor: WatchListBusinessLogic?
  var router: (NSObjectProtocol & WatchListRoutingLogic & WatchListDataPassing)?
  
  // MARK: - Properties
  
  // MARK: - Outlets
  
  @IBOutlet var tableView: UITableView!

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = WatchListInteractor()
    let presenter = WatchListPresenter()
    let router = WatchListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
    
    navigationItem.title = "My Watch List"
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    tableView.rowHeight = UITableViewAutomaticDimension
    
    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething() {
    let request = WatchList.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: WatchList.Something.ViewModel) {
    //nameTextField.text = viewModel.name
  }
}

// MARK: - TableView Delegate

extension WatchListViewController: UITableViewDelegate {
  
}

// MARK: - TableView DataSource

extension WatchListViewController: UITableViewDataSource {
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return 5
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "WatchListCell", for: indexPath) as! WatchListCell
    
//    switch indexPath.row {
//    case 0...2:
//      cell.testLabel.text = "Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.\nOrganically grow the holistic world view of disruptive innovation via workplace diversity and empowerment. Leverage agile frameworks to provide a robust synopsis for high level overviews."
//    default:
//      cell.testLabel.text = "Leverage agile frameworks to provide a robust synopsis for high level overviews."
//    }
    
    return cell
  }
  
  func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
    return "Title Goes Here"
  }
  
}












